// 接口拦截器
/* interface responseVal {
  data: object;
  status: number;
  [propName: string]: any;
} */
import axios from "axios";
import handlestatusCode from '@/api/statusCode.ts'
const isProd = process.env.NODE_ENV === "production";
import store from "@/store/store.ts";
const reg = /^\/auth\/login/;
const instance = axios.create({
  baseURL: isProd ? /* "http://47.107.253.252:8083/customer" */ "/apis" : "/service",
});
function setToken() {
  const { state: { permission: { user: { token } } } }: any = store;
  token && (instance.defaults.headers.common["x-auth-token"] = token);

}
// 设置请求头
instance.defaults.headers.post["Content-Type"] = "application/json";

instance.interceptors.request.use((config: any) => {
  // setToken();
  const { state: { permission: { user: { token } } } }: any = store;
  token && !config.headers.common['x-auth-token'] &&  (config.headers.common['x-auth-token'] = token)
  return config;
});
instance.interceptors.response.use((response: any) => {
  const token = response.headers["x-auth-token"];
  // tslint:disable-next-line:no-unused-expression
  token && (instance.defaults.headers.common["x-auth-token"] = token);
  return Promise.resolve(response);
}, (error: any) => {
  return Promise.reject({...handlestatusCode(error.response.status), error});
});
export { instance };
