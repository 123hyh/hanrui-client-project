<script >
export default {
  render () {
    return (
      <section class="bg-image">
        <section class="login">
          <h1>供应链客户系统</h1>
          <a-form
            layout="horizontal"
            form={this.form}
            on-submit={this.handleSubmit}
          >
            <a-form-item
              validate-status={this.userNameError() ? "error" : ""}
              help={this.userNameError() || ""}
            >
              <a-input
                v-decorator={[
                  "userName",
                  {
                    rules: [
                      { required: true, message: "Please input your username!" }
                    ]
                  }
                ]}
                placeholder="Username"
              >
                <a-icon
                  slot="prefix"
                  type="user"
                  style="color:rgba(0,0,0,.25)"
                />
              </a-input>
            </a-form-item>
            <a-form-item
              validate-status={this.passwordError() ? "error" : ""}
              help={this.passwordError() || ""}
            >
              <a-input
                v-decorator={[
                  "password",
                  {
                    rules: [
                      { required: true, message: "Please input your Password!" }
                    ]
                  }
                ]}
                type="password"
                placeholder="Password"
              >
                <a-icon
                  slot="prefix"
                  type="lock"
                  style="color:rgba(0,0,0,.25)"
                />
              </a-input>
            </a-form-item>
            <a-form-item>
              <a-button
                type="primary"
                html-type="submit"
                loading={this.loading}
                block
              >
                Log in
              </a-button>
            </a-form-item>
          </a-form>
        </section>
      </section>
    );
  },
  data () {
    return {
      form: this.$form.createForm(this),
      loading: false
    }
  },
  methods: {
    userNameError () {
      const { getFieldError, isFieldTouched } = this.form;
      return isFieldTouched("userName") && getFieldError("userName");
    },
    // Only show error after a field is touched.
    passwordError () {
      const { getFieldError, isFieldTouched } = this.form;
      return isFieldTouched("password") && getFieldError("password");
    },
    handleSubmit (e) {
      e.preventDefault();
      this.form.validateFields((err, values) => {
        // if (!err) { 勿动，暂时注释登录验证
          // 验证通过后的操作
          this.loading = true
          setTimeout(() => {
            this.loading = false
            this.$router.push({path: '/home'});
          }, 1000);
          console.log("Received values of form: ", values);
        // }
      });
    }
  },

}
</script>
<style lang="less">
.bg-image {
  width: 100%;
  height: 100vmin;
  background: url(~@/assets/images/background.a568162c.svg) no-repeat 50% 50%;
  display: flex;
  > .login {
    margin: auto;
    width: 340px;
    height: 370px;
    >h1{
      text-align: center
    }
  }
}
</style>
